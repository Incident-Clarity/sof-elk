{
  "index_patterns": [
    "netflow-*"
  ],
  "composed_of": [
    "settings-common",
    "mappings-corecommon",
    "mappings-string",
    "mappings-ip_address",
    "mappings-geohash",
    "mappings-port",
    "mappings-zeekuid",
    "mappings-final"
  ],
  "template": {
    "mappings": {
      "runtime": {
        "netflow.delta_flow_count_vis": {
          "type": "long",
          "script": {
            "source": "emit(doc['netflow.delta_flow_count'].value);"
          }
        },
        "destination.bytes_vis": {
          "type": "long",
          "script": {
            "source": "emit(doc['destination.bytes'].value);"
          }
        },
        "destination.packets_vis": {
          "type": "long",
          "script": {
            "source": "emit(doc['destination.packets'].value);"
          }
        },
        "network.missed_bytes_vis": {
          "type": "long",
          "script": {
            "source": "emit(doc['network.missed_bytes'].value);"
          }
        },
        "source.bytes_vis": {
          "type": "long",
          "script": {
            "source": "emit(doc['source.bytes'].value);"
          }
        },
        "source.packets_vis": {
          "type": "long",
          "script": {
            "source": "emit(doc['source.packets'].value);"
          }
        },
        "network.bytes": {
          "type": "long",
          "script": {
            "source": "emit(doc['source.bytes'].value + doc['destination.bytes'].value);"
          }
        },
        "network.bytes_vis": {
          "type": "long",
          "script": {
            "source": "emit(doc['source.bytes'].value + doc['destination.bytes'].value);"
          }
        },
        "network.packets": {
          "type": "long",
          "script": {
            "source": "emit(doc['source.packets'].value + doc['destination.packets'].value);"
          }
        },
        "network.packets_vis": {
          "type": "long",
          "script": {
            "source": "emit(doc['source.packets'].value + doc['destination.packets'].value);"
          }
        },
        "network.pcr": {
          "type": "long",
          "script": {
            "source": "if (doc.containsKey('source.bytes') && doc.containsKey('destination.bytes')) { emit((doc['source.packets'].value - doc['destination.packets'].value) / (doc['source.packets'].value + doc['destination.packets'].value)); }"
          }
        }
      },
      "properties": {
        "netflow": {
          "properties": {
            "exporter": {
              "properties": {
                "ip": {
                  "type": "ip"
                }
              }
            }
          }
        }
      }
    }
  },
  "_meta": {
    "provider": "SOF-ELK"
  }
}
